--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -882,6 +882,11 @@
 	bool "ITM device support" if EXPERT
 	depends on TOUCHSCREEN_USB_COMPOSITE
 
+config TOUCHSCREEN_USB_VOCORETC
+	default y
+	bool "VOCORETC device support" if EXPERT
+	depends on TOUCHSCREEN_USB_COMPOSITE
+
 config TOUCHSCREEN_USB_ETURBO
 	default y
 	bool "eTurboTouch (non-eGalax compatible) device support" if EXPERT
--- a/drivers/input/touchscreen/usbtouchscreen.c
+++ b/drivers/input/touchscreen/usbtouchscreen.c
@@ -143,6 +143,7 @@
 	DEVTYPE_NEXIO,
 	DEVTYPE_ELO,
 	DEVTYPE_ETOUCH,
+	DEVTYPE_VOCORETC,
 };
 
 #define USB_DEVICE_HID_CLASS(vend, prod) \
@@ -251,6 +252,10 @@
 	{USB_DEVICE(0x7374, 0x0001), .driver_info = DEVTYPE_ETOUCH},
 #endif
 
+#ifdef CONFIG_TOUCHSCREEN_USB_VOCORETC
+	{USB_DEVICE(0x04b4, 0x1004), .driver_info = DEVTYPE_VOCORETC},
+#endif
+
 	{}
 };
 
@@ -1068,6 +1073,24 @@
 
 
 /*****************************************************************************
+ * VoCore Touch Screen part
+ */
+
+#ifdef CONFIG_TOUCHSCREEN_USB_VOCORETC
+
+static int vocoretc_read_data(struct usbtouch_usb *dev, unsigned char *pkt)
+{
+	dev->x = ((pkt[3] & 0x0f) << 8) | pkt[4];
+	dev->y = ((pkt[5] & 0x0f) << 8) | pkt[6];
+	dev->touch = ((pkt[3] >> 6) != 1) ? 1 : 0;
+	dev->press = pkt[7];
+
+	return 1;
+}
+#endif
+
+
+/*****************************************************************************
  * the different device descriptors
  */
 #ifdef MULTI_PACKET
@@ -1296,6 +1319,16 @@
 		.read_data	= etouch_read_data,
 	},
 #endif
+#ifdef CONFIG_TOUCHSCREEN_USB_VOCORETC
+	[DEVTYPE_VOCORETC] = {
+		.min_xc		= 0x0,
+		.max_xc		= 0x01df,
+		.min_yc		= 0x0,
+		.max_yc		= 0x031f,
+		.rept_size	= 14,
+		.read_data	= vocoretc_read_data,
+	},
+#endif
 };
 
 
