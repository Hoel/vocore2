--- a/sound/soc/codecs/es8328.c
+++ b/sound/soc/codecs/es8328.c
@@ -39,6 +39,19 @@
 	.list	= rates_12288,
 };
 
+static const unsigned int rates_12000[] = {
+	8000, 12000, 16000, 24000, 32000, 44100, 48000, 96000,
+};
+
+static const int ratios_12000[] = {
+	27, 24, 23, 21, 20, 19, 18, 16,
+};
+
+static const struct snd_pcm_hw_constraint_list constraints_12000 = {
+	.count	= ARRAY_SIZE(rates_12000),
+	.list	= rates_12000,
+};
+
 static const unsigned int rates_11289[] = {
 	8018, 11025, 22050, 44100, 88200,
 };
@@ -312,6 +325,7 @@
 			ES8328_ADCPOWER_MIC_BIAS_OFF, 1, NULL, 0),
 	SND_SOC_DAPM_SUPPLY("Mic Bias Gen", ES8328_ADCPOWER,
 			ES8328_ADCPOWER_ADC_BIAS_GEN_OFF, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("Mic L Mono", ES8328_DACCONTROL21, 7, 0, NULL, 0),
 
 	SND_SOC_DAPM_SUPPLY("DAC STM", ES8328_CHIPPOWER,
 			ES8328_CHIPPOWER_DACSTM_RESET, 1, NULL, 0),
@@ -409,6 +423,7 @@
 	{ "Right ADC", NULL, "ADC DIG" },
 
 	{ "Mic Bias", NULL, "Mic Bias Gen" },
+	{ "Mic Bias", NULL, "Mic L Mono" },
 
 	{ "Left Line Mux", "Line 1", "LINPUT1" },
 	{ "Left Line Mux", "Line 2", "LINPUT2" },
@@ -559,11 +574,19 @@
 	struct es8328_priv *es8328 = snd_soc_codec_get_drvdata(codec);
 	int mclkdiv2 = 0;
 
+	freq = 12000000;	/* fixed for vocore2.*/
 	switch (freq) {
 	case 0:
 		es8328->sysclk_constraints = NULL;
 		es8328->mclk_ratios = NULL;
 		break;
+	case 24000000:
+		mclkdiv2 = 1;
+		/* fallthru */
+	case 12000000:
+		es8328->sysclk_constraints = &constraints_12000;
+		es8328->mclk_ratios = ratios_12000;
+		break;
 	case 22579200:
 		mclkdiv2 = 1;
 		/* fallthru */
@@ -784,26 +807,23 @@
 		return ret;
 	}
 
-	/* Setup clocks */
-	es8328->clk = devm_clk_get(codec->dev, NULL);
-	if (IS_ERR(es8328->clk)) {
-		dev_err(codec->dev, "codec clock missing or invalid\n");
-		ret = PTR_ERR(es8328->clk);
-		goto clk_fail;
-	}
-
-	ret = clk_prepare_enable(es8328->clk);
-	if (ret) {
-		dev_err(codec->dev, "unable to prepare codec clk\n");
-		goto clk_fail;
-	}
+	/* double speed mode is necessary. */
+	snd_soc_write(codec, ES8328_ADCCONTROL5, 0x20);
+	snd_soc_write(codec, ES8328_DACCONTROL2, 0x20);
+
+	/* set sound play volumn to max for easy use. */
+	snd_soc_write(codec, ES8328_DACCONTROL17, 0x80);
+	snd_soc_write(codec, ES8328_DACCONTROL20, 0x80);
+	snd_soc_write(codec, ES8328_DACCONTROL4, 0x00);
+	snd_soc_write(codec, ES8328_DACCONTROL5, 0x00);
+	snd_soc_write(codec, ES8328_LOUT1VOL, 0x1e);
+	snd_soc_write(codec, ES8328_ROUT1VOL, 0x1e);
+
+	/* set sound record volumn to max for easy use. */
+	snd_soc_write(codec, ES8328_ADCCONTROL8, 0x00);
+	snd_soc_write(codec, ES8328_ADCCONTROL9, 0x00);
 
 	return 0;
-
-clk_fail:
-	regulator_bulk_disable(ARRAY_SIZE(es8328->supplies),
-			       es8328->supplies);
-	return ret;
 }
 
 static int es8328_remove(struct snd_soc_codec *codec)
